description: Git and GitHub best practices for this project

---
globs: ["**"]

---

rule:

# Git and GitHub Guidelines

These rules help ensure consistency, traceability, and minimal disruption in collaborative workflows.

## Commit Messages

This project follows the [Conventional Commits v1.0.0](https://www.conventionalcommits.org/en/v1.0.0/) specification with [cz-git](https://cz-git.qbb.sh/) emoji-style prefixes.

### Conventional Commit Structure

```
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]
```

### Supported Types

See `root/.opencommitrc` for supported types.

### Commit Guidelines

- **Use imperative mood**: e.g., `fix: correct login logic`, not "fixed" or "fixes".
- **Be concise and descriptive**: Explain what and why, not how.
- **Group related changes**: One commit = one logical change.
- **Avoid WIP commits**: Use local history or squash before pushing.
- **Use `!` or `BREAKING CHANGE:` to indicate breaking changes**

### Examples

- `🐛 fix: correct logic for user session timeout`
- `✨ feat: add file upload support to profile form`
- `📝 docs: update README with setup instructions`
- `feat(api)!: change auth method to OAuth2`
- `chore!: drop support for Node 14\n\nBREAKING CHANGE: requires Node >=16`
- `🚧 wip: implement new dashboard layout`

**Optional:** If available, you may use [opencommit](https://github.com/di-sukharev/opencommit) oco command to assist in generating Conventional Commit messages.

---

## Branching

- **Use feature branches**: Never commit directly to `main` or `develop`.
- **Branch naming convention**: Use Linear-style naming with issue IDs from [Linear](https://linear.app), e.g., `abc-123-add-login-form`.
- No restrictions on the rest of the branch name formatting.

---

## Pull Requests

- **Small and focused**: Only include changes related to one task or fix.
- **Minimal changes**: Do not reformat or optimize unrelated code.
- **Reference issues**: Link related issues with `Closes #123` or `Fixes #456`.
- **Self-review before submitting**: Ensure the PR is clean, clear, and passes CI.
- **Use draft PRs**: Mark as draft if still in progress.

---

## Merge Strategy

- **Squash and merge**: Preferred method to keep history clean.
- **Rebase before merging**: Rebase against `main` to avoid merge commits.
- **Never force push to shared branches**

---

## Important: Minimal Diff Principle

**Do not include unrelated changes in a PR**.  
**Do not change formatting or naming unless it directly relates to the issue**.  
**Each PR should solve one problem and introduce the smallest possible diff.**

# Git Commit Message Guidelines

## Supported Commit Types

For commit types and their corresponding emojis, please refer to the `.opencommitrc` file at the root of the repository. This file defines all supported commit types and their associated emojis.

The `.opencommitrc` file is the source of truth for commit types in this project. Before creating a commit message, check this file for the current list of supported types.

## Commit Message Format

